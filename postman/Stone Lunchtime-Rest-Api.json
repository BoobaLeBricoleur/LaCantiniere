{
	"info": {
		"_postman_id": "b133cbee-21c7-45b6-89a6-be18a1803312",
		"name": "Stone LunchTime - Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6861003"
	},
	"item": [
		{
			"name": "Add Order",
			"item": [
				{
					"name": "Login as lunchlady",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Authorization is present\", function () {",
									"    pm.response.to.have.header(\"Authorization\");",
									"});",
									"// Add JWT for next request",
									"pm.environment.set(\"currentAuthorization\", postman.getResponseHeader(\"Authorization\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clear JWT old token",
									"pm.environment.unset(\"currentAuthorization\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/login?email=toto@gmail.com&password=bonjour",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "toto@gmail.com"
								},
								{
									"key": "password",
									"value": "bonjour"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an order (one menu)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Found id in return stream\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"currentAuthorization is present\", function () {",
									"    pm.environment.get(\"currentAuthorization\") !== undefined && pm.environment.get(\"currentAuthorization\") !== null && pm.environment.get(\"currentAuthorization\") !== \"\";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{currentAuthorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"constraintId\": -1,\r\n  \"menuId\": 1,\r\n  \"userId\": 1\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/order/add",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"order",
								"add"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "Login as lunchlady",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Authorization is present\", function () {",
									"    pm.response.to.have.header(\"Authorization\");",
									"});",
									"// Add JWT for next request",
									"pm.environment.set(\"currentAuthorization\", postman.getResponseHeader(\"Authorization\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clear JWT old token",
									"pm.environment.unset(\"currentAuthorization\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/login?email=toto@gmail.com&password=bonjour",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "toto@gmail.com"
								},
								{
									"key": "password",
									"value": "bonjour"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Found user id 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"currentAuthorization is present\", function () {",
									"    pm.environment.get(\"currentAuthorization\") !== undefined && pm.environment.get(\"currentAuthorization\") !== null && pm.environment.get(\"currentAuthorization\") !== \"\";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{currentAuthorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/user/find/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"user",
								"find",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with id = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Found id in return stream\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"pm.test(\"Values should be set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Albert\");",
									"    pm.expect(jsonData.firstname).to.eql(\"Smith\");",
									"    pm.expect(jsonData.postalCode).to.eql(\"78140\");",
									"    // Wallet will not change",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"currentAuthorization is present\", function () {",
									"    pm.environment.get(\"currentAuthorization\") !== undefined && pm.environment.get(\"currentAuthorization\") !== null && pm.environment.get(\"currentAuthorization\") !== \"\";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{currentAuthorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"address\": \"3 road of iron\",\r\n  \"wallet\": 35.5,\r\n  \"postalCode\": \"78140\",\r\n  \"name\": \"Albert\",\r\n  \"firstname\": \"Smith\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/user/update/2",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"user",
								"update",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Login as normal user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Authorization is present\", function () {",
									"    pm.response.to.have.header(\"Authorization\");",
									"});",
									"// Add JWT for next request",
									"pm.environment.set(\"currentAuthorization\", postman.getResponseHeader(\"Authorization\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clear JWT old token",
									"pm.environment.unset(\"currentAuthorization\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/login?email=clara.marec@gmail.com&password=bonjour",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "clara.marec@gmail.com"
								},
								{
									"key": "password",
									"value": "bonjour"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the connected user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"currentAuthorization is present\", function () {",
									"    pm.environment.get(\"currentAuthorization\") !== undefined && pm.environment.get(\"currentAuthorization\") !== null && pm.environment.get(\"currentAuthorization\") !== \"\";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{currentAuthorization}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{domain}}:{{port}}/{{context}}/user/delete/2",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}"
							],
							"port": "{{port}}",
							"path": [
								"{{context}}",
								"user",
								"delete",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "currentAuthorization",
			"value": "",
			"type": "string"
		},
		{
			"key": "context",
			"value": "stone.lunchtime",
			"type": "string"
		},
		{
			"key": "protocol",
			"value": "http",
			"type": "string"
		},
		{
			"key": "domain",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8080",
			"type": "string"
		}
	]
}